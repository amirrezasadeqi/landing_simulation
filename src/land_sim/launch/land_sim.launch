<?xml version="1.0"?>
<launch>
    <!-- starting the desired world -->
    <include file="$(find land_sim)/launch/spawn_world.launch" />

    <!-- spawning the hector_quadrotor in a seperated namespace -->
    <group ns="drone">
        <param name="tf_prefix" value="drone"/>
        <include file="$(find hector_quadrotor_gazebo)/launch/spawn_quadrotor.launch" >
            <arg name="model" value="$(find hector_quadrotor_description)/urdf/quadrotor_hokuyo_utm30lx.gazebo.xacro"/> 
            <arg name="x" value="1"/>
            <arg name="y" value="0"/>
            <arg name="z" value="0"/>

        </include>
    </group>

    <!-- spawning the landing target in a seperated namespace -->
    <group ns="ugv">
        <param name="tf_prefix" value="ugv"/>
        <arg name="base"      value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
        <arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 --> 
        <arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons --> 
        <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro --> 
        <!-- spawning the turtlebot robot -->
        <include file="$(find turtlebot_gazebo)/launch/includes/$(arg base).launch.xml">
            <arg name="base" value="$(arg base)"/>
            <arg name="stacks" value="$(arg stacks)"/>
            <arg name="3d_sensor" value="$(arg 3d_sensor)"/>

        </include>

        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
            <param name="publish_frequency" type="double" value="30.0" />
        </node>
          <!-- Fake laser -->
        <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
        <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
         args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
            <param name="scan_height" value="10"/>
            <param name="output_frame_id" value="/camera_depth_frame"/>
            <param name="range_min" value="0.45"/>
            <remap from="image" to="/camera/depth/image_raw"/>
            <remap from="scan" to="/scan"/>
        </node>

    </group>

    <!-- adding transform of ugv/odom wrt world frame -->
    <node pkg="tf" type="static_transform_publisher" name="ugv_wrt_world" args="0 0 0 0 0 0 world ugv/odom 100"/>

    <!-- adding the quadrotor orientation frame -->
    <node pkg="cmd_vel_converter" type="quad_orientation_broadcaster" name="quad_orientation_broadcaster" />

</launch>